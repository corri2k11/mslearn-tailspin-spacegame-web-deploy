trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
        - npm
    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.100'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
  - job: 'BuildDbDacPac'  #new build job! Create dacpac file
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    #Generate DB .dacpac by building VS DB project
    - task: VSBuild@1
      displayName: 'Build DB project'
      inputs:
        project: '**/*.sqlproj'
    
    #Copy generated .dacpac artifact to Pipeline Temp Staging Directory
    - task: CopyFiles@2
      displayName: 'Copy DB dacpac file to staging directory'
      inputs:
        contents: Tailspin.SpaceGame.Web/bin/**/*.dacpac
        TargetFolder: '$(Build.StagingDirectory)'
    
    #Public .dacpac artifact to Pipeline Artifacts Directory
    - task: PublishBuildArtifacts@1
      displayName: 'Publish DB .dacpac Artifact to Pipeline'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: dropDacpac
      condition: succeededOrFailed()

- stage: 'DB_VERIFICATION'
  displayName: 'DB Schema Change Verification'
  dependsOn: Build
  jobs:
  - deployment: 'DB'
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: 'Release'
    environment: 'DB_VERIFICATION'
    strategy:
      runOnce:
        deploy:
          steps:
            #Download DB dacpac Artifact, onput for next task...
            - download: current
              artifact: dropDacpac  #Download and Read dacpac..
              patterns: '**/*'

            #Generate Schema Change Script file (SQLDelta.sql)
            - task: SqlAzureDacpacDeployment@1
              displayName: 'Generate Schema Change Script (SQLDelta.sql - DB VERIFY)'
              inputs:
                azureSubscription: 'azAppServiceCon'
                authenticationType: 'server'
                serverName: '$(dbServerName).database.windows.net'
                DatabaseName: '$(dbName)'
                sqlUsername: '$(dbAdminLogin)'
                sqlPassword: '$(dbAdminPassword)'
                deployType: 'DacpacTask'
                deploymentAction: 'Script'
                dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
                IpDetectionMethod: 'AutoDetect'

            #Reads contents from SQLDelta.sql script file, publish it to the Pipeline
            #By using script output (Get-Content), the database administrator can approve the changes before the changes are applied to the database.
            - task: PowerShell@2
              displayName: 'Read, Publish Auto Generated SQL Changes Script Contents to Pipeline'
              inputs:
                targetType: 'inline'
                script: |
                  Write-Host "Auto Generated SQL Changes Script (SQLDelta.sql)"
                  Get-Content d:\a\1\s\GeneratedOutputFiles\$(dbName)_Script.sql | foreach {Write-Output $_}

- stage: 'DB_APPLY'
  displayName: 'Apply DB Schema Changes'
  dependsOn: DB_VERIFICATION
  jobs:
  - deployment: DB_APPLY
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: 'Release'
    environment: DB_APPLY
    strategy:
      runOnce:
        deploy:
          steps:
          #Download DB dacpac Artifact, input for next task...
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          
          #APPLY DB schema change to Azure SQL Database! after DBA verified/approved change
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Deploy and Apply SQL Schema Change (DB APPLY)'
            inputs:
              azureSubscription: 'azAppServiceCon'
              authenticationType: 'server'
              serverName: '$(dbServerName).database.windows.net'
              DatabaseName: '$(dbName)'
              sqlUsername: '$(dbAdminLogin)'
              sqlPassword: '$(dbAdminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Publish'
              DacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'
          
- stage: 'DEV'
  displayName: 'Deploy to DEV'
  dependsOn: DB_APPLY
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: DEV
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website (DEV)'
            inputs:
              azureSubscription: 'azAppServiceCon'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'QA'
  displayName: 'Deploy to QA'
  dependsOn: DEV
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: QA
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
            
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website (QA)'
            inputs:
              azureSubscription: 'azAppServiceCon'
              appName: '$(WebAppNameQA)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'STAGING'
  displayName: 'Deploy to STAGING'
  dependsOn: QA
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: STAGING
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website (STAGING)'
            inputs:
              azureSubscription: 'azAppServiceCon'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'